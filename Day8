######## Problem1 ----->  Tweets' Rolling Averages [Twitter SQL Interview Question] ###################################
link --> https://datalemur.com/questions/rolling-average-tweets

Q. Given a table of tweet data over a specified time period, calculate the 3-day rolling average of tweets for each user. Output the user ID, tweet date, and rolling averages rounded to 2 decimal places.


SELECT user_id,tweet_date,round(avg(tweet_count)
OVER(
partition by user_id
order by tweet_date
ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
),2) as rolling_avg_3d

from tweets;

######## Problem2 -----> Highest-Grossing Items [Amazon SQL Interview Question] ###################################
link -->  https://datalemur.com/questions/sql-highest-grossing

Q. Assume you're given a table with information on Amazon customers and their spending on products in different categories, write a query to identify the top two highest-grossing products within each category in the year 2022. The output should include the category, product, and total spend.

with product_category_spend as (
SELECT category,
product,
sum(spend) as total_spend
from product_spend 
where extract(year from transaction_date) = '2022'
group by 1,2
),
top_spend as (
select * ,
RANK() OVER(
PARTITION BY category
ORDER BY total_spend desc) as ranking
from product_category_spend
)

select category,product,total_spend
from top_spend
where ranking <=2
order by 1,ranking;



######## Problem3 ----->Top 5 Artists [Spotify SQL Interview Question] ###################################
link -->  https://datalemur.com/questions/top-fans-rank

Q. Assume there are three Spotify tables containing information about the artists, songs, and music charts. Write a query to find the top 5 artists whose songs appear most frequently in the Top 10 of the global_song_rank table.
Display the top 5 artist names in ascending order, along with their song appearance ranking. Note that if two artists have the same number of song appearances, they should have the same ranking, and the rank numbers should be continuous (i.e. 1, 2, 2, 3, 4, 5).

with top_artists as (select artist_id,
DENSE_RANK() OVER(
ORDER BY song_count desc) 
as artist_rank
from(
select 
s.artist_id,
count(s.song_id) as song_count 
from songs s 
inner join global_song_rank g on s.song_id = g.song_id
where g.rank <=10
group by s.artist_id
) as top_songs
)

select a.artist_name,t.artist_rank
from top_artists t
inner join artists a on t.artist_id = a.artist_id
where t.artist_rank <=5
order by 2,1 ;






























